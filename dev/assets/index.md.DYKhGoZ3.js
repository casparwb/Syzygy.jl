import{_ as t,c as a,o as i,aA as s}from"./chunks/framework.CCzQAQQF.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{"layout":"home","hero":{"name":"Syzygy.jl","tagline":"A fast, flexible, direct n-body integrator written in pure Julia.","image":{"src":"/logo.png","alt":"Syzygy"},"actions":[{"theme":"brand","text":"Get Started","link":"/getting_started"},{"theme":"alt","text":"View on Github","link":"https://github.com/casparwb/Syzygy.jl"},{"theme":"alt","text":"API","link":"/api"}]},"features":[{"icon":"<img width=\\"64\\" height=\\"64\\" src=\\"https://docs.sciml.ai/DiffEqDocs/stable/assets/logo.png\\" alt=\\"markdown\\"/>","title":"Fast and flexible","details":"Optimized for speed, and built on the DifferentialEquations.jl framework.","link":"/manual/simulating.md"},{"icon":"<img width=\\"64\\" height=\\"64\\" src=\\"https://raw.githubusercontent.com/JuliaLang/julia-logo-graphics/refs/heads/master/images/juliadots.iconset/icon_1024x1024.png\\" />","title":"Composable","details":"Easily extend the code with your own potentials and conditions.","link":"/manual/advanced.md"},{"title":"Feature-rich","details":"Supports high-precision numerics, post-Newtonian potentials, tidal prescriptions, stellar evolution parameters such as stellar types and stellar structure, and much more.","link":"/manual/advanced.md"}]},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":null}'),n={name:"index.md"};function r(o,e,l,d,c,p){return i(),a("div",null,e[0]||(e[0]=[s('<hr><p><code>Syzygy.jl</code> is a direct <a href="https://en.wikipedia.org/wiki/N-body_simulation" target="_blank" rel="noreferrer">N-body</a> simulator for astrophysical applications written in <a href="https://julialang.org/" target="_blank" rel="noreferrer">Julia</a>. This code is mainly aimed at simulating and visualizing the dynamics of hierarchical multistar systems and planetary systems, but it also supports non-hierarchical configurations. The package uses the <a href="https://diffeq.sciml.ai/" target="_blank" rel="noreferrer">DifferentialEquations.jl</a> ecosystem to solve the governing differential equations, making this code highly performant and flexible, allowing for, e.g., both fixed and adaptive timestepping with adjustable error tolerances, easy code injection with callbacks, and of the choice of a wide array of ODE solvers.</p><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>This package is still being developed, so certain features may not work as expected. If you want to use this package, please make sure that you perform tests to ensure that your results are to be expected.</p></div>',3)]))}const u=t(n,[["render",r]]);export{m as __pageData,u as default};
